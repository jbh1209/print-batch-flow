[
  {
    "table_schema": "extensions",
    "table_name": "pg_stat_statements",
    "view_definition": null
  },
  {
    "table_schema": "extensions",
    "table_name": "pg_stat_statements_info",
    "view_definition": null
  },
  {
    "table_schema": "public",
    "table_name": "v_jobs_ready_for_production",
    "view_definition": " SELECT j.id,\n    j.user_id,\n    j.wo_no,\n    j.status,\n    j.so_no,\n    j.qt_no,\n    j.date,\n    j.rep,\n    j.user_name,\n    j.category,\n    j.customer,\n    j.reference,\n    j.qty,\n    j.due_date,\n    j.location,\n    j.highlighted,\n    j.created_at,\n    j.updated_at,\n    j.qr_code_data,\n    j.qr_code_url,\n    j.category_id,\n    j.has_custom_workflow,\n    j.manual_due_date,\n    j.manual_sla_days,\n    j.is_expedited,\n    j.expedited_at,\n    j.expedited_by,\n    j.expedite_reason,\n    j.batch_category,\n    j.batch_ready,\n    j.batch_allocated_at,\n    j.batch_allocated_by,\n    j.is_batch_master,\n    j.size,\n    j.specification,\n    j.contact,\n    j.paper_specifications,\n    j.delivery_specifications,\n    j.finishing_specifications,\n    j.prepress_specifications,\n    j.printing_specifications,\n    j.operation_quantities,\n    j.due_date_warning_level,\n    j.last_due_date_check,\n    j.due_date_buffer_days,\n    j.internal_completion_date,\n    j.due_date_locked,\n    j.tentative_due_date,\n    j.proof_approved_at,\n    (j.proof_approved_at IS NOT NULL) AS is_ready_for_production\n   FROM production_jobs j;"
  },
  {
    "table_schema": "public",
    "table_name": "v_scheduler_stages_ready",
    "view_definition": " WITH proof_stage AS (\n         SELECT COALESCE(( SELECT production_stages.id\n                   FROM production_stages\n                  WHERE (lower(production_stages.name) = 'proof'::text)\n                 LIMIT 1), 'ea194968-3604-44a3-9314-d190bb5691c7'::uuid) AS id\n        ), approved_jobs AS (\n         SELECT DISTINCT jsi.job_id,\n            COALESCE(jsi.proof_approved_manually_at, ( SELECT max(pl.responded_at) AS max\n                   FROM proof_links pl\n                  WHERE ((pl.stage_instance_id = jsi.id) AND (lower(COALESCE(pl.client_response, ''::text)) = ANY (ARRAY['approved'::text, 'accept'::text, 'accepted'::text])))),\n                CASE\n                    WHEN (jsi.status = 'completed'::text) THEN jsi.updated_at\n                    ELSE NULL::timestamp with time zone\n                END) AS approved_at\n           FROM (job_stage_instances jsi\n             JOIN proof_stage ps_1 ON ((jsi.production_stage_id = ps_1.id)))\n          WHERE ((jsi.status = 'completed'::text) OR (jsi.proof_approved_manually_at IS NOT NULL) OR (EXISTS ( SELECT 1\n                   FROM proof_links pl\n                  WHERE ((pl.stage_instance_id = jsi.id) AND (lower(COALESCE(pl.client_response, ''::text)) = ANY (ARRAY['approved'::text, 'accept'::text, 'accepted'::text]))))))\n        )\n SELECT s.id,\n    s.job_id,\n    s.job_table_name,\n    s.category_id,\n    s.production_stage_id,\n    s.stage_order,\n    s.status,\n    s.started_at,\n    s.completed_at,\n    s.started_by,\n    s.completed_by,\n    s.notes,\n    s.qr_scan_data,\n    s.created_at,\n    s.updated_at,\n    s.part_name,\n    s.printer_id,\n    s.rework_count,\n    s.rework_reason,\n    s.previous_stage_id,\n    s.is_rework,\n    s.proof_emailed_at,\n    s.proof_approved_manually_at,\n    s.client_email,\n    s.client_name,\n    s.proof_pdf_url,\n    s.job_order_in_stage,\n    s.part_type,\n    s.dependency_group,\n    s.stage_specification_id,\n    s.quantity,\n    s.estimated_duration_minutes,\n    s.actual_duration_minutes,\n    s.setup_time_minutes,\n    s.unique_stage_key,\n    s.part_assignment,\n    s.scheduled_start_at,\n    s.scheduled_end_at,\n    s.scheduled_minutes,\n    s.schedule_status,\n    s.queue_position,\n    s.is_split_job,\n    s.split_job_part,\n    s.split_job_total_parts,\n    s.scheduling_method,\n    s.scheduled_by_user_id,\n    ps.name AS stage_name,\n    sg.name AS stage_group,\n    0 AS setup_minutes,\n        CASE\n            WHEN ((s.scheduled_start_at IS NOT NULL) AND (s.scheduled_end_at IS NOT NULL)) THEN (GREATEST((1)::numeric, round((EXTRACT(epoch FROM (s.scheduled_end_at - s.scheduled_start_at)) / 60.0))))::integer\n            ELSE GREATEST(1, COALESCE(s.scheduled_minutes, 15))\n        END AS estimated_minutes\n   FROM ((job_stage_instances s\n     JOIN production_stages ps ON ((ps.id = s.production_stage_id)))\n     LEFT JOIN stage_groups sg ON ((sg.id = ps.stage_group_id)))\n  WHERE ((s.job_id IN ( SELECT approved_jobs.job_id\n           FROM approved_jobs)) AND (s.status = 'pending'::text) AND (COALESCE(s.schedule_status, 'unscheduled'::text) <> ALL (ARRAY['completed'::text, 'in_progress'::text])) AND (lower(ps.name) <> ALL (ARRAY['proof'::text, 'completed'::text, 'batch allocation'::text, 'dtp'::text])) AND (lower(COALESCE(sg.name, ''::text)) <> ALL (ARRAY['dtp'::text, 'batching'::text])));"
  },
  {
    "table_schema": "vault",
    "table_name": "decrypted_secrets",
    "view_definition": null
  }
]